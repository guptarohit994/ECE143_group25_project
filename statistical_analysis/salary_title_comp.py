import helper
import os
import pandas as pd
import scipy.stats
import numpy as np
import warnings

# string matching rules for the different professor types in the professor dataset
rules = {
    "Associate Professor": (lambda x : "ASSOC PROF" in x),
    "Adjunct Professor": (lambda x : "ADJ PROF" in x),
    "Assistant Professor": (lambda x : "ASST PROF" in x), 
    "Lecturer": (lambda x : x[:4]=="LECT"), 
    "Senior Lecturer": (lambda x : "SR LECT" in x), 
    "Full Professor": (lambda x : x[:4]=="PROF")
}

def get_avg_dept_df():
    """Reads in the salary and capes dataset, combining capes results per-professor using an average 
    weighted by # of ratings. 
    
    Returns:
        [Dataframe] -- A dataframe that has one row per professor, with their weighted averaged ratings.
    """

    pd.options.mode.chained_assignment = None 
    dept_list_to_use = helper.general_dept_list
    merged_data_dir = "../data/mergedData2"
    avg_depts_df = pd.DataFrame(columns = ["Title","GrossPay", "RegularPay", "OvertimePay", "OtherPay", "Instructor", "Enroll", "EvalsMade", "RcmndInstr"])
    warnings.simplefilter(action='ignore', category=FutureWarning)


    # going through all departments
    for root, dirs, files in os.walk(merged_data_dir):
        for f in files:
            if f[-3:]=='csv':
                dept = f.split("_")[1].split('.')[0]
            else:
                dept = None
            if f[-3:]=='csv' and dept in dept_list_to_use:
                averaged_df = pd.DataFrame(columns = ["Title","GrossPay", "RegularPay", "OvertimePay", "OtherPay", "Instructor", "Enroll", "EvalsMade", "RcmndInstr"])
                df = pd.read_csv(os.path.join(root,f))
                df = df[df["Term"].apply(lambda x : x[-2:] in ['17','18','19'])]
                df = df[["Title","GrossPay", "RegularPay", "OvertimePay", "OtherPay", "Instructor", "Enroll", "EvalsMade", "RcmndInstr"]]

                # cleaning up data (getting rid of percentage, and making things numerical, not strings)
                df["RcmndInstr"] = df["RcmndInstr"].apply(lambda x:float(x[:-1]))
                df["GrossPay"] = df["GrossPay"].apply(lambda x:float(x.replace(",","")))
                df["RegularPay"] = df["RegularPay"].apply(lambda x:float(x.replace(",","")))

                # calculating weighted average based on evaluations made
                for prof in set(df["Instructor"]):
                    prof_df = df[df["Instructor"]==prof]
                    prof_weighted_rcmnd = sum(prof_df["EvalsMade"]*prof_df["RcmndInstr"])/sum(prof_df["EvalsMade"])
                    prof_row = prof_df.iloc[0]
                    prof_row["Enroll"] = sum(prof_df["Enroll"])
                    prof_row["EvalsMade"] = sum(prof_df["EvalsMade"])
                    prof_row["RcmndInstr"] = prof_weighted_rcmnd
                    averaged_df = averaged_df.append(prof_row)

                averaged_df["Dept"] = dept
                avg_depts_df = avg_depts_df.append(averaged_df)

    return avg_depts_df


def print_title_salary_statistics(avg_depts_df):
    """Given the dataframe generated by get_avg_dept_df, print statistics per professor title
    
    Arguments:
        avg_depts_df {DataFrame} -- The dataframe generated by get_avg_dept_df
    """
    title_counts = pd.DataFrame(columns=["Count"])
    warnings.simplefilter(action='ignore', category=FutureWarning)
    x = None
    for title in rules:
        df = avg_depts_df
        #df = avg_depts_df[avg_depts_df["Dept"] == "NENG"]
        df = df[df["Title"].apply(rules[title])]
        print("{} -- {}".format(title, len(df)))
        print("Mean: {}".format(df["RcmndInstr"].mean()))
        print("Median: {}".format(df["RcmndInstr"].median()))
        print("Standard Deviation: {}".format(df["RcmndInstr"].std()))
        print("Mean regular pay: {}".format(df["RegularPay"].mean()))
        print("median regular pay: {}".format(df["RegularPay"].median()))
        print("Mean gross pay: {}".format(df["GrossPay"].mean()))
        print("median gross pay: {}".format(df["GrossPay"].median()))
        print("\n") 
        title_counts = title_counts.append(pd.Series(data={"Count":len(df)}, name=title))

def run_hypothesis_test(avg_depts_df):
    """Runs hypothesis test between full professor mean recommendation and lecturer mean recommendation,
    given the dataframe generated by get_avg_dept_df.
    
    Arguments:
        avg_depts_df {DataFrame} -- the dataframe generated by get_avg_dept_df
    """

    # hypothesis testing between prof means and lecturer means
    full_prof_ratings = avg_depts_df[avg_depts_df["Title"].apply(rules["Full Professor"])]["RcmndInstr"]
    lecturer_ratings = avg_depts_df[avg_depts_df["Title"].apply(rules["Lecturer"])]["RcmndInstr"]

    # checking for normality

    t_stat, p_val = scipy.stats.ttest_ind(full_prof_ratings, lecturer_ratings, equal_var = False)
    print("P value: {}".format(p_val/2))

    avg_sd = np.sqrt( (full_prof_ratings.std()**2 + lecturer_ratings.std()**2) / 2)
    cohens_d = (full_prof_ratings.mean() - lecturer_ratings.mean())/ avg_sd
    print("Cohen's d: {}".format(cohens_d))